window.ProtectedPlanet ||= {}

class ProtectedPlanet.ProtectedAreaMap
  POLYGONS_TABLE = 'wdpa_poly_<%= Rails.env %>'
  POINTS_TABLE   = 'wdpa_point_<%= Rails.env %>'

  constructor: (@map, @config) ->

  _generateCartocssSelector: (args) ->
    tables = args.table
    tables = [tables] unless $.isArray(tables)

    if args.attrName and args.attrVal
      comparator = "[#{args.attrName} = #{args.attrVal}]"
      mapFunction = (value) -> "##{value}#{comparator}"
    else
      mapFunction = (value) -> "##{value}"

    return tables.map(mapFunction).join(',')

  _generateCartocss: (args) ->
    args = $.extend({
      opacity: 0.7
      lineWidth: 0.05
      lineColor: 'D41623'
      polygonFill: 'E43430'
    }, args)

    """
      #{@_generateCartocssSelector(args)} {
        line-color:##{args.lineColor};
        line-width:#{args.lineWidth};
        polygon-fill:##{args.polygonFill};
        polygon-opacity:#{args.opacity};
      }
    """

  addCountryTiles: (sublayers) ->
    args =
      table: 'countries_geometries'
      attrName: 'iso_3'
      attrVal: "'#{@config['iso3']}'"
      opacity: .2
      lineWidth: 0

    sublayers.push
      sql: "SELECT * FROM #{args.table} WHERE iso_3 = '#{@config['iso3']}'"
      cartocss: @_generateCartocss(args)
    sublayers

  addRegionTiles: (sublayers) ->
    args =
      table: 'continents'
      attrName: 'continent'
      attrVal: "'#{@config['regionName']}'"
      opacity: .2
      lineWidth: 0

    sublayers.push
      sql: "SELECT * FROM #{args.table} WHERE continent = '#{@config['regionName']}'"
      cartocss: @_generateCartocss(args)
    sublayers

  addWdpaTiles: (sublayers) ->
    cartocss = [
      @_generateCartocss(
        table: [POLYGONS_TABLE, POINTS_TABLE]
        lineColor: '40541b'
        polygonFill: '83ad35'
      )
    ]

    if @config['wdpaId']?
      cartocss.push @_generateCartocss(
        table: [POLYGONS_TABLE, POINTS_TABLE]
        attrName: 'wdpaid'
        attrVal: @config['wdpaId']
      )

    sublayers.push
      sql: "SELECT the_geom, the_geom_webmercator, wdpaid FROM #{POINTS_TABLE} UNION ALL SELECT the_geom, the_geom_webmercator, wdpaid FROM #{POLYGONS_TABLE}"
      cartocss: cartocss.join("\n")
    sublayers

  render: ->
    sublayers = []

    @addWdpaTiles(sublayers)

    if @config['iso3']?
      sublayers = @addCountryTiles sublayers
    if @config['regionName']?
      sublayers = @addRegionTiles sublayers

    carto_tiles = new cartodb.Tiles(
      sublayers: sublayers
      user_name: "carbon-tool"
    )

    carto_tiles.getTiles( (o) =>
      L.tileLayer(o.tiles[0]).addTo @map
    )
