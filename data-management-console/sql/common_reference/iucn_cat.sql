DELETE FROM stg_iucn_cat

DROP SEQUENCE IF EXISTS iucn_cat_seq
CREATE SEQUENCE iucn_cat_seq AS INT START WITH 1

CREATE OR REPLACE FUNCTION stg_iucn_cat_id() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN IF NEW.id is NULL THEN NEW.id = nextval('iucn_cat_seq'); END IF; RETURN NEW; END; $$
DROP TRIGGER IF EXISTS trig_stg_iucn_cat ON stg_iucn_cat
CREATE TRIGGER trig_stg_iucn_cat BEFORE INSERT ON stg_iucn_cat FOR EACH ROW EXECUTE procedure stg_iucn_cat_id();

INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('Ia', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('Ib', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('II', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('III', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('IV', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('V', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('VI', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('Not Reported', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('Not Applicable', 10000 );
INSERT INTO stg_iucn_cat(DESCRIPTION, ORIGINATOR_ID ) VALUES('Not Assigned', 10000 );


